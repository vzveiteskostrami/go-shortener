// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: proto/shorturl.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShortUrl_SetLink_FullMethodName       = "/demo.ShortUrl/SetLink"
	ShortUrl_GetLink_FullMethodName       = "/demo.ShortUrl/GetLink"
	ShortUrl_SetBatchUrl_FullMethodName   = "/demo.ShortUrl/SetBatchUrl"
	ShortUrl_GetOwnUrlList_FullMethodName = "/demo.ShortUrl/GetOwnUrlList"
	ShortUrl_DelOwnUrlList_FullMethodName = "/demo.ShortUrl/DelOwnUrlList"
	ShortUrl_Ping_FullMethodName          = "/demo.ShortUrl/Ping"
	ShortUrl_GetStats_FullMethodName      = "/demo.ShortUrl/GetStats"
)

// ShortUrlClient is the client API for ShortUrl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortUrlClient interface {
	SetLink(ctx context.Context, in *SetLinkRequest, opts ...grpc.CallOption) (*SetLinkResponse, error)
	GetLink(ctx context.Context, in *GetLinkRequest, opts ...grpc.CallOption) (*GetLinkResponse, error)
	SetBatchUrl(ctx context.Context, in *SetBatchUrlRequest, opts ...grpc.CallOption) (*SetBatchUrlResponse, error)
	GetOwnUrlList(ctx context.Context, in *GetOwnUrlListRequest, opts ...grpc.CallOption) (*GetOwnUrlListResponse, error)
	DelOwnUrlList(ctx context.Context, in *DelOwnUrlListRequest, opts ...grpc.CallOption) (*DelOwnUrlListResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
}

type shortUrlClient struct {
	cc grpc.ClientConnInterface
}

func NewShortUrlClient(cc grpc.ClientConnInterface) ShortUrlClient {
	return &shortUrlClient{cc}
}

func (c *shortUrlClient) SetLink(ctx context.Context, in *SetLinkRequest, opts ...grpc.CallOption) (*SetLinkResponse, error) {
	out := new(SetLinkResponse)
	err := c.cc.Invoke(ctx, ShortUrl_SetLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortUrlClient) GetLink(ctx context.Context, in *GetLinkRequest, opts ...grpc.CallOption) (*GetLinkResponse, error) {
	out := new(GetLinkResponse)
	err := c.cc.Invoke(ctx, ShortUrl_GetLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortUrlClient) SetBatchUrl(ctx context.Context, in *SetBatchUrlRequest, opts ...grpc.CallOption) (*SetBatchUrlResponse, error) {
	out := new(SetBatchUrlResponse)
	err := c.cc.Invoke(ctx, ShortUrl_SetBatchUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortUrlClient) GetOwnUrlList(ctx context.Context, in *GetOwnUrlListRequest, opts ...grpc.CallOption) (*GetOwnUrlListResponse, error) {
	out := new(GetOwnUrlListResponse)
	err := c.cc.Invoke(ctx, ShortUrl_GetOwnUrlList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortUrlClient) DelOwnUrlList(ctx context.Context, in *DelOwnUrlListRequest, opts ...grpc.CallOption) (*DelOwnUrlListResponse, error) {
	out := new(DelOwnUrlListResponse)
	err := c.cc.Invoke(ctx, ShortUrl_DelOwnUrlList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortUrlClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, ShortUrl_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortUrlClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, ShortUrl_GetStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortUrlServer is the server API for ShortUrl service.
// All implementations must embed UnimplementedShortUrlServer
// for forward compatibility
type ShortUrlServer interface {
	SetLink(context.Context, *SetLinkRequest) (*SetLinkResponse, error)
	GetLink(context.Context, *GetLinkRequest) (*GetLinkResponse, error)
	SetBatchUrl(context.Context, *SetBatchUrlRequest) (*SetBatchUrlResponse, error)
	GetOwnUrlList(context.Context, *GetOwnUrlListRequest) (*GetOwnUrlListResponse, error)
	DelOwnUrlList(context.Context, *DelOwnUrlListRequest) (*DelOwnUrlListResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	mustEmbedUnimplementedShortUrlServer()
}

// UnimplementedShortUrlServer must be embedded to have forward compatible implementations.
type UnimplementedShortUrlServer struct {
}

func (UnimplementedShortUrlServer) SetLink(context.Context, *SetLinkRequest) (*SetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLink not implemented")
}
func (UnimplementedShortUrlServer) GetLink(context.Context, *GetLinkRequest) (*GetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLink not implemented")
}
func (UnimplementedShortUrlServer) SetBatchUrl(context.Context, *SetBatchUrlRequest) (*SetBatchUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBatchUrl not implemented")
}
func (UnimplementedShortUrlServer) GetOwnUrlList(context.Context, *GetOwnUrlListRequest) (*GetOwnUrlListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnUrlList not implemented")
}
func (UnimplementedShortUrlServer) DelOwnUrlList(context.Context, *DelOwnUrlListRequest) (*DelOwnUrlListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOwnUrlList not implemented")
}
func (UnimplementedShortUrlServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShortUrlServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedShortUrlServer) mustEmbedUnimplementedShortUrlServer() {}

// UnsafeShortUrlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortUrlServer will
// result in compilation errors.
type UnsafeShortUrlServer interface {
	mustEmbedUnimplementedShortUrlServer()
}

func RegisterShortUrlServer(s grpc.ServiceRegistrar, srv ShortUrlServer) {
	s.RegisterService(&ShortUrl_ServiceDesc, srv)
}

func _ShortUrl_SetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).SetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortUrl_SetLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).SetLink(ctx, req.(*SetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortUrl_GetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).GetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortUrl_GetLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).GetLink(ctx, req.(*GetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortUrl_SetBatchUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBatchUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).SetBatchUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortUrl_SetBatchUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).SetBatchUrl(ctx, req.(*SetBatchUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortUrl_GetOwnUrlList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnUrlListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).GetOwnUrlList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortUrl_GetOwnUrlList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).GetOwnUrlList(ctx, req.(*GetOwnUrlListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortUrl_DelOwnUrlList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOwnUrlListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).DelOwnUrlList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortUrl_DelOwnUrlList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).DelOwnUrlList(ctx, req.(*DelOwnUrlListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortUrl_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortUrl_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortUrl_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortUrl_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortUrl_ServiceDesc is the grpc.ServiceDesc for ShortUrl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortUrl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.ShortUrl",
	HandlerType: (*ShortUrlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLink",
			Handler:    _ShortUrl_SetLink_Handler,
		},
		{
			MethodName: "GetLink",
			Handler:    _ShortUrl_GetLink_Handler,
		},
		{
			MethodName: "SetBatchUrl",
			Handler:    _ShortUrl_SetBatchUrl_Handler,
		},
		{
			MethodName: "GetOwnUrlList",
			Handler:    _ShortUrl_GetOwnUrlList_Handler,
		},
		{
			MethodName: "DelOwnUrlList",
			Handler:    _ShortUrl_DelOwnUrlList_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ShortUrl_Ping_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _ShortUrl_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shorturl.proto",
}
